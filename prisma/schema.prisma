// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  phone     String?
  isAdmin   Boolean  @default(false)
  tickets   Ticket[]
  createdAt DateTime @default(now())
}

model Movie {
  id          String      @id @default(cuid())
  title       String
  description String
  tags        String[]
  duration    Int
  screenings  Screening[]
}

model Ticket {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  seat        Seat      @relation(fields: [seatId], references: [id])
  seatId      String
  screening   Screening @relation(fields: [screeningId], references: [id])
  screeningId String
  purchasedAt DateTime  @default(now())
  refunded    Boolean   @default(false)

  @@unique([seatId, screeningId]) // Compound unique constraint
}

model Seat {
  id           String     @id @default(cuid())
  auditorium   Auditorium @relation(fields: [auditoriumId], references: [id])
  auditoriumId String
  row          Row
  number       Int
  ticket       Ticket[]
}

model Screening {
  id           String     @id @default(cuid())
  movie        Movie      @relation(fields: [movieId], references: [id])
  movieId      String
  auditorium   Auditorium @relation(fields: [auditoriumId], references: [id])
  auditoriumId String
  startTime    DateTime
  tickets      Ticket[]
}

model Theatre {
  id          String       @id @default(cuid())
  name        String
  location    String
  phone       String
  email       String
  auditoriums Auditorium[]
}

model Auditorium {
  id         String      @id @default(cuid())
  number     Int
  type       Type
  theatre    Theatre     @relation(fields: [theatreId], references: [id])
  theatreId  String
  seats      Seat[]
  screenings Screening[]
}

enum Row {
  AA
  A
  B
  C
  D
  E
  F
  G
  H
  I
  J
  K
  L
  M
}

enum Type {
  IMAX
  STANDARD
  CC
  DBOX
  SCREENX
  DOLBY_ATMOS
  DOLBY_3D
}
